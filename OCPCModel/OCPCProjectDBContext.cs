// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using SyncRoutineWS.PCNWModel;

namespace SyncRoutineWS.OCPCModel;

public partial class OCPCProjectDBContext : DbContext
{
    public OCPCProjectDBContext()
    {
    }

    public OCPCProjectDBContext(DbContextOptions<OCPCProjectDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<TblAddendum> TblAddenda { get; set; }

    public virtual DbSet<TblArchOwner> TblArchOwners { get; set; }

    public virtual DbSet<TblCityCounty> TblCityCounties { get; set; }

    public virtual DbSet<TblContact> TblContacts { get; set; }

    public virtual DbSet<TblContractor> TblContractors { get; set; }

    public virtual DbSet<TblCounty> TblCounties { get; set; }

    public virtual DbSet<TblMember> TblMembers { get; set; }

    public virtual DbSet<TblProjAo> TblProjAos { get; set; }

    public virtual DbSet<TblProjCon> TblProjCons { get; set; }

    public virtual DbSet<TblProjCounty> TblProjCounties { get; set; }

    public virtual DbSet<TblProject> TblProjects { get; set; }
    public virtual DbSet<TblProjFieldChng> TblProjFieldChngs { get; set; }

  
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<TblProjFieldChng>(entity =>
        {
            entity.HasKey(e => e.ChngId);

            entity.ToTable("tblProjFieldChng");

            entity.HasIndex(e => new { e.EmailDt, e.ProjId, e.SortOrder }, "_dta_index_tblProjFieldChng_8_71671303__K4_K2_K6_1_3_5_7");

            entity.Property(e => e.ChngId).HasColumnName("ChngID");
            entity.Property(e => e.ChangedId).HasColumnName("ChangedID");
            entity.Property(e => e.ChngDt).HasColumnType("datetime");
            entity.Property(e => e.EmailDt).HasColumnType("datetime");
            entity.Property(e => e.FieldName).HasMaxLength(20);
            entity.Property(e => e.ProjId).HasColumnName("ProjID");
            entity.Property(e => e.SyncDt).HasColumnType("datetime");
        });
        modelBuilder.Entity<TblAddendum>(entity =>
        {
            entity.HasKey(e => e.AddendaId);

            entity.ToTable("tblAddenda", tb =>
            {
                tb.HasTrigger("tr_Addenda_D");
                tb.HasTrigger("tr_Addenda_IU");
                tb.HasTrigger("trgAfterUpdateOntblAddenda");
            });

            entity.HasIndex(e => e.ProjId, "FHProjId").IsDescending();

            entity.Property(e => e.AddendaId).HasColumnName("AddendaID");
            entity.Property(e => e.AddendaNo).HasMaxLength(50);
            entity.Property(e => e.InsertDt).HasColumnType("smalldatetime");
            entity.Property(e => e.IssueDt).HasColumnType("smalldatetime");
            entity.Property(e => e.MoreInfo).HasDefaultValue(false);
            entity.Property(e => e.MvwebPath)
                .HasMaxLength(200)
                .HasColumnName("MVWebPath");
            entity.Property(e => e.NewBd)
                .HasDefaultValue(false)
                .HasColumnName("NewBD");
            entity.Property(e => e.PageCnt).HasMaxLength(10);
            entity.Property(e => e.SyncStatus).HasDefaultValue(1);

            entity.HasOne(d => d.Proj).WithMany(p => p.TblAddenda)
                .HasForeignKey(d => d.ProjId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_tblAddenda_tblProject");
        });

        modelBuilder.Entity<TblArchOwner>(entity =>
        {
            entity.ToTable("tblArchOwner", tb => tb.HasTrigger("trgAfterUpdateOntblArchOwner"));

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Addr1).HasMaxLength(50);
            entity.Property(e => e.AotypeId).HasColumnName("AOTypeID");
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.Cnote)
                .HasMaxLength(255)
                .HasColumnName("CNote");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fax).HasMaxLength(50);
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.Phone).HasMaxLength(50);
            entity.Property(e => e.Pwd)
                .HasMaxLength(10)
                .HasColumnName("PWD");
            entity.Property(e => e.State).HasMaxLength(50);
            entity.Property(e => e.SyncStatus).HasDefaultValue(1);
            entity.Property(e => e.Type1).HasMaxLength(50);
            entity.Property(e => e.Uid)
                .HasMaxLength(10)
                .HasColumnName("UID");
            entity.Property(e => e.WebAddress).HasMaxLength(50);
            entity.Property(e => e.Zip).HasMaxLength(50);
        });

        modelBuilder.Entity<TblCityCounty>(entity =>
        {
            entity.HasKey(e => e.CityCountyId);

            entity.ToTable("tblCityCounty", tb => tb.HasTrigger("trgAfterUpdateOntblCityCounty"));

            entity.Property(e => e.CityCountyId).HasColumnName("CityCountyID");
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.CountyId).HasColumnName("CountyID");
            entity.Property(e => e.SyncStatus).HasDefaultValue(1);
        });

        modelBuilder.Entity<TblContact>(entity =>
        {
            entity.HasKey(e => e.ConId);

            entity.ToTable("tblContact", tb =>
            {
                tb.HasTrigger("tr_Contact_D");
                tb.HasTrigger("tr_Contact_IU");
                tb.HasTrigger("trgAfterUpdateOntblContact");
            });

            entity.HasIndex(e => new { e.ConId, e.Id }, "_dta_index_tblContact_8_943342425__K1_K2_8_9");

            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.Contact).HasMaxLength(50);
            entity.Property(e => e.Daily)
                .HasDefaultValue(false)
                .HasComment("Send Daily Email?");
            entity.Property(e => e.Email).HasMaxLength(50);
            entity.Property(e => e.FirstName)
                .HasMaxLength(50)
                .HasDefaultValue("");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .HasDefaultValue("");
            entity.Property(e => e.MainContact)
                .HasDefaultValue(false)
                .HasComment("If there are multiple contacts, which is the main contact?");
            entity.Property(e => e.MessageDt).HasColumnType("datetime");
            entity.Property(e => e.Password).HasMaxLength(128);
            entity.Property(e => e.Phone).HasMaxLength(50);
            entity.Property(e => e.SyncStatus).HasDefaultValue(1);
            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .HasComment("Owner, Estimator");
            entity.Property(e => e.Uid)
                .HasMaxLength(256)
                .HasColumnName("UID");

            entity.HasOne(d => d.IdNavigation).WithMany(p => p.TblContacts)
                .HasForeignKey(d => d.Id)
                .HasConstraintName("FK_tblContact_tblMember");
        });

        modelBuilder.Entity<TblContractor>(entity =>
        {
            entity.ToTable("tblContractor", tb => tb.HasTrigger("trgAfterUpdateOntblContractor"));

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Addr1).HasMaxLength(255);
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.Cnote)
                .HasMaxLength(255)
                .HasColumnName("CNote");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .HasColumnName("email");
            entity.Property(e => e.Fax).HasMaxLength(50);
            entity.Property(e => e.GcserviceTimeStamp)
                .HasColumnType("datetime")
                .HasColumnName("GCServiceTimeStamp");
            entity.Property(e => e.Hosting).HasDefaultValue(false);
            entity.Property(e => e.HostingPwd)
                .HasMaxLength(50)
                .HasColumnName("HostingPWD");
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.Phone).HasMaxLength(50);
            entity.Property(e => e.Pwd)
                .HasMaxLength(20)
                .HasColumnName("PWD");
            entity.Property(e => e.State).HasMaxLength(50);
            entity.Property(e => e.SyncStatus).HasDefaultValue(1);
            entity.Property(e => e.Uid)
                .HasMaxLength(20)
                .HasColumnName("UID");
            entity.Property(e => e.WebAddress).HasMaxLength(50);
            entity.Property(e => e.Zip).HasMaxLength(50);
        });

        modelBuilder.Entity<TblCounty>(entity =>
        {
            entity.HasKey(e => e.CountyId);

            entity.ToTable("tblCounty");

            entity.Property(e => e.CountyId).HasColumnName("CountyID");
            entity.Property(e => e.County).HasMaxLength(50);
            entity.Property(e => e.State).HasMaxLength(2);
        });

        modelBuilder.Entity<TblMember>(entity =>
        {
            entity.HasKey(e => e.Id)
                .HasName("aaaaatblMember_PK")
                .IsClustered(false);

            entity.ToTable("tblMember", tb =>
            {
                tb.HasTrigger("tr_Member_IU");
                tb.HasTrigger("trgAfterUpdateOntblMember");
            });

            entity.HasIndex(e => e.Id, "ID");

            entity.HasIndex(e => e.Id, "_dta_index_tblMember_8_2047346358__K1_10_37");

            entity.HasIndex(e => e.Id, "_dta_index_tblMember_c_8_2047346358__K1").IsClustered();

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.AcceptedTermsDt).HasColumnType("datetime");
            entity.Property(e => e.AddPkgCost)
                .HasColumnType("money")
                .HasColumnName("AddPkg_Cost");
            entity.Property(e => e.ArchPkg).HasDefaultValue(false);
            entity.Property(e => e.ArchPkgCost)
                .HasColumnType("money")
                .HasColumnName("ArchPkg_Cost");
            entity.Property(e => e.BillAddress).HasMaxLength(50);
            entity.Property(e => e.BillCity).HasMaxLength(50);
            entity.Property(e => e.BillState).HasMaxLength(2);
            entity.Property(e => e.BillZip).HasMaxLength(50);
            entity.Property(e => e.CalSort).HasMaxLength(50);
            entity.Property(e => e.Cod)
                .HasDefaultValue(false)
                .HasColumnName("COD");
            entity.Property(e => e.Company).HasMaxLength(50);
            entity.Property(e => e.ConId).HasColumnName("Con_ID");
            entity.Property(e => e.Credits).HasColumnName("credits");
            entity.Property(e => e.DailyEmail)
                .HasMaxLength(255)
                .HasColumnName("Daily_Email");
            entity.Property(e => e.Dba)
                .HasMaxLength(100)
                .HasColumnName("DBA");
            entity.Property(e => e.Dba2)
                .HasMaxLength(100)
                .HasColumnName("DBA2");
            entity.Property(e => e.Discipline)
                .HasMaxLength(255)
                .HasDefaultValue("");
            entity.Property(e => e.Div).HasMaxLength(50);
            entity.Property(e => e.Email).HasMaxLength(50);
            entity.Property(e => e.FavExp).HasColumnType("datetime");
            entity.Property(e => e.Fax).HasMaxLength(50);
            entity.Property(e => e.Fka)
                .HasMaxLength(100)
                .HasColumnName("FKA");
            entity.Property(e => e.Gcservices).HasColumnName("GCservices");
            entity.Property(e => e.Grace).HasDefaultValue(0);
            entity.Property(e => e.HowdUhearAboutUs)
                .HasMaxLength(255)
                .HasDefaultValue("")
                .HasColumnName("HowdUHearAboutUs");
            entity.Property(e => e.Html)
                .HasDefaultValue(false)
                .HasColumnName("HTML");
            entity.Property(e => e.InsertDate)
                .HasColumnType("datetime")
                .HasColumnName("Insert Date");
            entity.Property(e => e.LastPayDate).HasMaxLength(50);
            entity.Property(e => e.MagCost)
                .HasColumnType("money")
                .HasColumnName("Mag_Cost");
            entity.Property(e => e.MailAddress).HasMaxLength(50);
            entity.Property(e => e.MailCity).HasMaxLength(50);
            entity.Property(e => e.MailState).HasMaxLength(2);
            entity.Property(e => e.MailZip).HasMaxLength(50);
            entity.Property(e => e.MemberCost)
                .HasColumnType("money")
                .HasColumnName("Member_Cost");
            entity.Property(e => e.MemberType)
                .HasDefaultValue(0)
                .HasComment("0 = Regular, 1 = Full, 2 = Partial");
            entity.Property(e => e.MinorityStatus).HasMaxLength(50);
            entity.Property(e => e.NameField)
                .HasDefaultValue(0m)
                .HasComment("Favorites/IEN # control")
                .HasColumnType("decimal(18, 0)");
            entity.Property(e => e.Note).HasColumnType("ntext");
            entity.Property(e => e.OverdueAmt).HasColumnType("money");
            entity.Property(e => e.OverdueDt).HasColumnType("datetime");
            entity.Property(e => e.PaperlessBilling)
                .HasMaxLength(50)
                .HasColumnName("Paperless_billing");
            //entity.Property(e => e.PaymentTerm)
            //    .HasMaxLength(2)
            //    .HasDefaultValue("12");
            entity.Property(e => e.Pdfpkg).HasColumnName("PDFPkg");
            entity.Property(e => e.Phl).HasColumnName("PHL");
            entity.Property(e => e.RenewalDate).HasColumnType("datetime");
            entity.Property(e => e.ResourceAdd)
                .HasMaxLength(50)
                .HasColumnName("Resource_Add");
            entity.Property(e => e.ResourceColor)
                .HasMaxLength(50)
                .HasColumnName("Resource_Color");
            entity.Property(e => e.ResourceCost)
                .HasColumnType("money")
                .HasColumnName("Resource_cost");
            entity.Property(e => e.ResourceDate)
                .HasMaxLength(50)
                .HasDefaultValueSql("((0))")
                .HasColumnName("Resource_date");
            entity.Property(e => e.ResourceLogo)
                .HasMaxLength(50)
                .HasColumnName("Resource_Logo");
            entity.Property(e => e.ResourceStandard)
                .HasMaxLength(50)
                .HasColumnName("Resource_Standard");
            entity.Property(e => e.SuspendedDt).HasMaxLength(50);
            entity.Property(e => e.SyncStatus).HasDefaultValue(1);
            entity.Property(e => e.Term).HasMaxLength(50);
            entity.Property(e => e.TmStamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("tmStamp");
            entity.Property(e => e.WebAdCost)
                .HasColumnType("money")
                .HasColumnName("WebAd_cost");
            entity.Property(e => e.WebAdDate)
                .HasMaxLength(50)
                .HasColumnName("WebAd_date");
        });

        modelBuilder.Entity<TblProjAo>(entity =>
        {
            entity.HasKey(e => e.ProjAo);

            entity.ToTable("tblProjAO", tb => tb.HasTrigger("trgAfterUpdateOntblProjAo"));

            entity.HasIndex(e => e.ProjId, "FHProjID").IsDescending();

            entity.Property(e => e.ProjAo).HasColumnName("ProjAO");
            entity.Property(e => e.AotypeId).HasColumnName("AOTypeId");
            entity.Property(e => e.ArchOwnerId).HasColumnName("ArchOwnerID");
            entity.Property(e => e.BoldBp)
                .HasDefaultValue(false)
                .HasColumnName("BoldBP");
            entity.Property(e => e.ProjId).HasColumnName("ProjID");
            entity.Property(e => e.ShowOnResults).HasDefaultValue(false);
            entity.Property(e => e.SyncStatus).HasDefaultValue(1);

            entity.HasOne(d => d.ArchOwner).WithMany(p => p.TblProjAos)
                .HasForeignKey(d => d.ArchOwnerId)
                .HasConstraintName("FK_tblProjAO_tblArchOwner");

            entity.HasOne(d => d.Proj).WithMany(p => p.TblProjAos)
                .HasForeignKey(d => d.ProjId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_tblProjAO_tblProject");
        });

        modelBuilder.Entity<TblProjCon>(entity =>
        {
            entity.HasKey(e => e.ProjConId);

            entity.ToTable("tblProjCon", tb =>
            {
                tb.HasTrigger("tr_ProjCon_I");
                tb.HasTrigger("trgAfterUpdateOntblProjCon");
            });

            entity.HasIndex(e => e.ProjId, "FHProjId").IsDescending();

            entity.Property(e => e.ProjConId).HasColumnName("ProjConID");
            entity.Property(e => e.Apparent).HasDefaultValue(false);
            entity.Property(e => e.AwardedTo).HasDefaultValue(false);
            entity.Property(e => e.BidAmt).HasColumnType("money");
            entity.Property(e => e.Bidding).HasDefaultValue(false);
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.HostingDateExtention).HasMaxLength(3);
            entity.Property(e => e.IssuingOffice).HasDefaultValue(false);
            entity.Property(e => e.Lm)
                .HasDefaultValue(false)
                .HasColumnName("LM");
            entity.Property(e => e.NotBidding).HasDefaultValue(false);
            entity.Property(e => e.Note).HasColumnType("ntext");
            entity.Property(e => e.Person).HasMaxLength(50);
            entity.Property(e => e.PrivatePwd).HasMaxLength(50);
            entity.Property(e => e.ProjId).HasColumnName("ProjID");
            entity.Property(e => e.Rank).HasMaxLength(10);
            entity.Property(e => e.SortOrder)
                .HasMaxLength(10)
                .HasDefaultValueSql("((1))")
                .HasComment("This controls what tblProjects BidDt they will be using");
            entity.Property(e => e.SyncStatus).HasDefaultValue(1);
            entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Ucpwd)
                .HasMaxLength(50)
                .HasColumnName("UCPwd");

            entity.HasOne(d => d.Con).WithMany(p => p.TblProjCons)
                .HasForeignKey(d => d.ConId)
                .HasConstraintName("FK_tblProjCon_tblContractor");

            entity.HasOne(d => d.Proj).WithMany(p => p.TblProjCons)
                .HasForeignKey(d => d.ProjId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_tblProjCon_tblProject");
        });

        modelBuilder.Entity<TblProjCounty>(entity =>
        {
            entity.HasKey(e => e.ProjCountyId);

            entity.ToTable("tblProjCounty", tb => tb.HasTrigger("trgAfterUpdateOntblProjCounty"));

            entity.Property(e => e.ProjCountyId).HasColumnName("ProjCountyID");
            entity.Property(e => e.CountyId).HasColumnName("CountyID");
            entity.Property(e => e.ProjId).HasColumnName("ProjID");
            entity.Property(e => e.SyncStatus).HasDefaultValue(1);

            entity.HasOne(d => d.County).WithMany(p => p.TblProjCounties)
                .HasForeignKey(d => d.CountyId)
                .HasConstraintName("FK_tblProjCounty_tblCounty");

            entity.HasOne(d => d.Proj).WithMany(p => p.TblProjCounties)
                .HasForeignKey(d => d.ProjId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tblProjCounty_tblProject");
        });

        modelBuilder.Entity<TblProject>(entity =>
        {
            entity.HasKey(e => e.ProjId);

            entity.ToTable("tblProject", tb =>
            {
                tb.HasTrigger("tr_Project_U");
                tb.HasTrigger("trgAfterUpdateOntblProject");
            });

            entity.HasIndex(e => e.LocState, "LocState");

            entity.HasIndex(e => e.BidDt, "PK_tblProjectBidDt");

            entity.HasIndex(e => e.PlanNo, "PK_tblProjectPlanNo");

            entity.HasIndex(e => e.Title, "PK_tblProjectTitle");

            entity.HasIndex(e => new { e.BidDt3, e.BidDt, e.BidDt2, e.BidDt4, e.PlanNo }, "_dta_index_tblProject_7_772197801__K101_K9_K99_K103_K15_1_2_5_17_26_39_43_49_64");

            entity.HasIndex(e => e.BidDt4, "_dta_index_tblProject_7_772197801__K103");

            entity.HasIndex(e => e.BidDt2, "_dta_index_tblProject_7_772197801__K99");

            entity.HasIndex(e => new { e.BidDt, e.ProjId, e.PlanNo }, "_dta_index_tblProject_7_772197801__K9_K1_K15_2_26_68_84_85_86_87");

            entity.Property(e => e.ArrivalDt).HasColumnType("smalldatetime");
            entity.Property(e => e.BendPc)
                .HasDefaultValue(false)
                .HasColumnName("BendPC");
            entity.Property(e => e.BidBond).HasMaxLength(20);
            entity.Property(e => e.BidDt).HasColumnType("datetime");
            entity.Property(e => e.BidDt2).HasColumnType("datetime");
            entity.Property(e => e.BidDt3).HasColumnType("datetime");
            entity.Property(e => e.BidDt4).HasColumnType("datetime");
            entity.Property(p => p.GeogPt).HasColumnType("geography");
            entity.Property(e => e.BidPkg).HasDefaultValue(false);
            entity.Property(e => e.Brnote)
                .HasMaxLength(180)
                .HasColumnName("BRNote");
            entity.Property(e => e.BrresultsFrom)
                .HasMaxLength(180)
                .HasColumnName("BRResultsFrom");
            entity.Property(e => e.BuildSolrIndex).HasDefaultValue(true);
            entity.Property(e => e.CallBack).HasDefaultValue(false);
            entity.Property(e => e.CheckSentDt).HasColumnType("smalldatetime");
            entity.Property(e => e.CompleteDt).HasMaxLength(150);
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Deposit).HasColumnType("money");
            entity.Property(e => e.Dfnote)
                .HasColumnType("ntext")
                .HasColumnName("DFNote");
            entity.Property(e => e.DiPath).HasMaxLength(100);
            entity.Property(e => e.DirtId)
                .HasDefaultValue(false)
                .HasColumnName("DirtID");
            entity.Property(e => e.DrawingPath).HasMaxLength(100);
            entity.Property(e => e.DupArDt).HasColumnType("smalldatetime");
            entity.Property(e => e.DupTitle).HasMaxLength(20);
            entity.Property(e => e.DwChk).HasDefaultValue(false);
            entity.Property(e => e.EstCost).HasMaxLength(70);
            entity.Property(e => e.EstCost2).HasMaxLength(70);
            entity.Property(e => e.EstCost3).HasMaxLength(70);
            entity.Property(e => e.EstCost4).HasMaxLength(70);
            entity.Property(e => e.ExtendedDt).HasColumnType("datetime");
            entity.Property(e => e.FutureWork).HasDefaultValue(false);
            entity.Property(e => e.Hold).HasDefaultValue(false);
            entity.Property(e => e.ImportDt).HasColumnType("smalldatetime");
            entity.Property(e => e.IndexPdffiles)
                .HasDefaultValue(true)
                .HasColumnName("IndexPDFFiles");
            entity.Property(e => e.InternalNote).HasColumnType("ntext");
            entity.Property(e => e.InternetDownload).HasDefaultValue(false);
            entity.Property(e => e.IssuingOffice).HasMaxLength(80);
            entity.Property(e => e.LastBidDt).HasMaxLength(150);
            entity.Property(e => e.Latitude).HasDefaultValue(0.0);
            entity.Property(e => e.LocAddr1).HasMaxLength(150);
            entity.Property(e => e.LocAddr2).HasMaxLength(150);
            entity.Property(e => e.LocCity).HasMaxLength(50);
            entity.Property(e => e.LocCity2).HasMaxLength(50);
            entity.Property(e => e.LocCity3).HasMaxLength(50);
            entity.Property(e => e.LocState).HasMaxLength(2);
            entity.Property(e => e.LocState2).HasMaxLength(2);
            entity.Property(e => e.LocState3).HasMaxLength(2);
            entity.Property(e => e.LocZip).HasMaxLength(10);
            entity.Property(e => e.Longitude).HasDefaultValue(0.0);
            entity.Property(e => e.Mandatory).HasDefaultValue(false);
            entity.Property(e => e.Mandatory2).HasDefaultValue(false);
            entity.Property(e => e.MaxViewPath).HasMaxLength(200);
            entity.Property(e => e.NoPrint).HasDefaultValue(false);
            entity.Property(e => e.NoSpecs).HasDefaultValue(false);
            entity.Property(e => e.NonRefundAmt).HasColumnType("money");
            entity.Property(e => e.OnlineNote).HasMaxLength(80);
            entity.Property(e => e.Phldone)
                .HasDefaultValue(false)
                .HasColumnName("PHLdone");
            entity.Property(e => e.Phlnote)
                .HasMaxLength(150)
                .HasColumnName("PHLnote");
            entity.Property(e => e.Phltimestamp)
                .HasColumnType("datetime")
                .HasColumnName("PHLtimestamp");
            entity.Property(e => e.PhlwebLink)
                .HasMaxLength(150)
                .HasColumnName("PHLwebLink");
            entity.Property(e => e.PreBidDt).HasColumnType("datetime");
            entity.Property(e => e.PreBidDt2).HasColumnType("datetime");
            entity.Property(e => e.PreBidLoc).HasMaxLength(150);
            entity.Property(e => e.PreBidLoc2).HasMaxLength(150);
            entity.Property(e => e.PrebidAnd)
                .HasDefaultValue(false)
                .HasColumnName("PrebidAND");
            entity.Property(e => e.PrebidOr)
                .HasDefaultValue(false)
                .HasColumnName("PrebidOR");
            entity.Property(e => e.PrevailingWage).HasDefaultValue(false);
            entity.Property(e => e.ProjNote).HasColumnType("ntext");
            entity.Property(e => e.ProjTimeStamp)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Publish).HasDefaultValue(false);
            entity.Property(e => e.PublishedFrom).HasMaxLength(30);
            entity.Property(e => e.PublishedFromDt).HasColumnType("smalldatetime");
            entity.Property(e => e.Recycle).HasDefaultValue(false);
            entity.Property(e => e.RefundAmt).HasColumnType("money");
            entity.Property(e => e.RegionId).HasColumnName("RegionID");
            entity.Property(e => e.RenChk).HasDefaultValue(false);
            entity.Property(e => e.ResultDt).HasColumnType("smalldatetime");
            entity.Property(e => e.S11x17).HasDefaultValue(false);
            entity.Property(e => e.S18x24).HasDefaultValue(false);
            entity.Property(e => e.S24x36).HasDefaultValue(false);
            entity.Property(e => e.S30x42).HasDefaultValue(false);
            entity.Property(e => e.S36x48)
                .HasDefaultValue(false)
                .HasColumnName("S36X48");
            entity.Property(e => e.ShipCheck).HasColumnType("money");
            entity.Property(e => e.ShowBr)
                .HasDefaultValue(false)
                .HasColumnName("ShowBR");
            entity.Property(e => e.ShowOnWeb).HasDefaultValue(false);
            entity.Property(e => e.ShowToAll).HasDefaultValue(false);
            entity.Property(e => e.SolrIndexDt).HasColumnType("datetime");
            entity.Property(e => e.SolrIndexPdfdt)
                .HasColumnType("datetime")
                .HasColumnName("SolrIndexPDFDt");
            entity.Property(e => e.SpcChk).HasDefaultValue(false);
            entity.Property(e => e.SpecPath).HasMaxLength(100);
            entity.Property(e => e.SpecsOnPlans).HasDefaultValue(false);
            entity.Property(e => e.Story).HasColumnType("ntext");
            entity.Property(e => e.StoryUnf)
                .HasColumnType("ntext")
                .HasColumnName("StoryUNF");
            entity.Property(e => e.StrAddenda)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("strAddenda");
            entity.Property(e => e.StrBidDt)
                .HasMaxLength(30)
                .HasColumnName("strBidDt");
            entity.Property(e => e.StrBidDt2)
                .HasMaxLength(30)
                .HasColumnName("strBidDt2");
            entity.Property(e => e.StrBidDt3)
                .HasMaxLength(30)
                .HasColumnName("strBidDt3");
            entity.Property(e => e.StrBidDt4)
                .HasMaxLength(30)
                .HasColumnName("strBidDt4");
            entity.Property(e => e.StrPreBidDt)
                .HasMaxLength(30)
                .HasColumnName("strPreBidDt");
            entity.Property(e => e.StrPreBidDt2)
                .HasMaxLength(30)
                .HasColumnName("strPreBidDt2");
            entity.Property(e => e.SubApprov).HasMaxLength(50);
            entity.Property(e => e.SyncStatus).HasDefaultValue(1);
            entity.Property(e => e.Title).HasMaxLength(255);
            entity.Property(e => e.TopChk)
                .HasDefaultValue(false)
                .HasComment("used in Maxviewprep to mark G3 prepped");
            entity.Property(e => e.Uc)
                .HasDefaultValue(false)
                .HasColumnName("UC");
            entity.Property(e => e.Ucpublic)
                .HasDefaultValue(false)
                .HasColumnName("UCPublic");
            entity.Property(e => e.Ucpwd)
                .HasMaxLength(50)
                .HasColumnName("UCPWD");
            entity.Property(e => e.Ucpwd2)
                .HasMaxLength(50)
                .HasColumnName("UCPWD2");
            entity.Property(e => e.UnderCounter).HasDefaultValue(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
